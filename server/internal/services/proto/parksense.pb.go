// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: parksense.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LotState int32

const (
	LotState_UNKNOWN  LotState = 0
	LotState_FREE     LotState = 1
	LotState_OCCUPIED LotState = 2
	LotState_RESERVED LotState = 3
)

// Enum value maps for LotState.
var (
	LotState_name = map[int32]string{
		0: "UNKNOWN",
		1: "FREE",
		2: "OCCUPIED",
		3: "RESERVED",
	}
	LotState_value = map[string]int32{
		"UNKNOWN":  0,
		"FREE":     1,
		"OCCUPIED": 2,
		"RESERVED": 3,
	}
)

func (x LotState) Enum() *LotState {
	p := new(LotState)
	*p = x
	return p
}

func (x LotState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LotState) Descriptor() protoreflect.EnumDescriptor {
	return file_parksense_proto_enumTypes[0].Descriptor()
}

func (LotState) Type() protoreflect.EnumType {
	return &file_parksense_proto_enumTypes[0]
}

func (x LotState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LotState.Descriptor instead.
func (LotState) EnumDescriptor() ([]byte, []int) {
	return file_parksense_proto_rawDescGZIP(), []int{0}
}

type ParkState int32

const (
	ParkState_NORMAL ParkState = 0
	ParkState_FIRE   ParkState = 1
)

// Enum value maps for ParkState.
var (
	ParkState_name = map[int32]string{
		0: "NORMAL",
		1: "FIRE",
	}
	ParkState_value = map[string]int32{
		"NORMAL": 0,
		"FIRE":   1,
	}
)

func (x ParkState) Enum() *ParkState {
	p := new(ParkState)
	*p = x
	return p
}

func (x ParkState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParkState) Descriptor() protoreflect.EnumDescriptor {
	return file_parksense_proto_enumTypes[1].Descriptor()
}

func (ParkState) Type() protoreflect.EnumType {
	return &file_parksense_proto_enumTypes[1]
}

func (x ParkState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParkState.Descriptor instead.
func (ParkState) EnumDescriptor() ([]byte, []int) {
	return file_parksense_proto_rawDescGZIP(), []int{1}
}

type ParkLot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ParkLotId     string                 `protobuf:"bytes,1,opt,name=park_lot_id,json=parkLotId,proto3" json:"park_lot_id,omitempty"`
	State         LotState               `protobuf:"varint,2,opt,name=state,proto3,enum=parksense.LotState" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParkLot) Reset() {
	*x = ParkLot{}
	mi := &file_parksense_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParkLot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkLot) ProtoMessage() {}

func (x *ParkLot) ProtoReflect() protoreflect.Message {
	mi := &file_parksense_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkLot.ProtoReflect.Descriptor instead.
func (*ParkLot) Descriptor() ([]byte, []int) {
	return file_parksense_proto_rawDescGZIP(), []int{0}
}

func (x *ParkLot) GetParkLotId() string {
	if x != nil {
		return x.ParkLotId
	}
	return ""
}

func (x *ParkLot) GetState() LotState {
	if x != nil {
		return x.State
	}
	return LotState_UNKNOWN
}

type ParkSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ParkSetId     string                 `protobuf:"bytes,1,opt,name=park_set_id,json=parkSetId,proto3" json:"park_set_id,omitempty"`
	Lots          []*ParkLot             `protobuf:"bytes,2,rep,name=lots,proto3" json:"lots,omitempty"`
	State         ParkState              `protobuf:"varint,3,opt,name=state,proto3,enum=parksense.ParkState" json:"state,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParkSet) Reset() {
	*x = ParkSet{}
	mi := &file_parksense_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParkSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkSet) ProtoMessage() {}

func (x *ParkSet) ProtoReflect() protoreflect.Message {
	mi := &file_parksense_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkSet.ProtoReflect.Descriptor instead.
func (*ParkSet) Descriptor() ([]byte, []int) {
	return file_parksense_proto_rawDescGZIP(), []int{1}
}

func (x *ParkSet) GetParkSetId() string {
	if x != nil {
		return x.ParkSetId
	}
	return ""
}

func (x *ParkSet) GetLots() []*ParkLot {
	if x != nil {
		return x.Lots
	}
	return nil
}

func (x *ParkSet) GetState() ParkState {
	if x != nil {
		return x.State
	}
	return ParkState_NORMAL
}

func (x *ParkSet) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

var File_parksense_proto protoreflect.FileDescriptor

const file_parksense_proto_rawDesc = "" +
	"\n" +
	"\x0fparksense.proto\x12\tparksense\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bgoogle/protobuf/empty.proto\"T\n" +
	"\aParkLot\x12\x1e\n" +
	"\vpark_lot_id\x18\x01 \x01(\tR\tparkLotId\x12)\n" +
	"\x05state\x18\x02 \x01(\x0e2\x13.parksense.LotStateR\x05state\"\xb7\x01\n" +
	"\aParkSet\x12\x1e\n" +
	"\vpark_set_id\x18\x01 \x01(\tR\tparkSetId\x12&\n" +
	"\x04lots\x18\x02 \x03(\v2\x12.parksense.ParkLotR\x04lots\x12*\n" +
	"\x05state\x18\x03 \x01(\x0e2\x14.parksense.ParkStateR\x05state\x128\n" +
	"\ttimestamp\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp*=\n" +
	"\bLotState\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\b\n" +
	"\x04FREE\x10\x01\x12\f\n" +
	"\bOCCUPIED\x10\x02\x12\f\n" +
	"\bRESERVED\x10\x03*!\n" +
	"\tParkState\x12\n" +
	"\n" +
	"\x06NORMAL\x10\x00\x12\b\n" +
	"\x04FIRE\x10\x012Y\n" +
	"\x10ParkSenseService\x12E\n" +
	"\x15StreamIncomingParkLot\x12\x16.google.protobuf.Empty\x1a\x12.parksense.ParkSet0\x01B\"Z ./server/internal/services/protob\x06proto3"

var (
	file_parksense_proto_rawDescOnce sync.Once
	file_parksense_proto_rawDescData []byte
)

func file_parksense_proto_rawDescGZIP() []byte {
	file_parksense_proto_rawDescOnce.Do(func() {
		file_parksense_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_parksense_proto_rawDesc), len(file_parksense_proto_rawDesc)))
	})
	return file_parksense_proto_rawDescData
}

var file_parksense_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_parksense_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_parksense_proto_goTypes = []any{
	(LotState)(0),                 // 0: parksense.LotState
	(ParkState)(0),                // 1: parksense.ParkState
	(*ParkLot)(nil),               // 2: parksense.ParkLot
	(*ParkSet)(nil),               // 3: parksense.ParkSet
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 5: google.protobuf.Empty
}
var file_parksense_proto_depIdxs = []int32{
	0, // 0: parksense.ParkLot.state:type_name -> parksense.LotState
	2, // 1: parksense.ParkSet.lots:type_name -> parksense.ParkLot
	1, // 2: parksense.ParkSet.state:type_name -> parksense.ParkState
	4, // 3: parksense.ParkSet.timestamp:type_name -> google.protobuf.Timestamp
	5, // 4: parksense.ParkSenseService.StreamIncomingParkLot:input_type -> google.protobuf.Empty
	3, // 5: parksense.ParkSenseService.StreamIncomingParkLot:output_type -> parksense.ParkSet
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_parksense_proto_init() }
func file_parksense_proto_init() {
	if File_parksense_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_parksense_proto_rawDesc), len(file_parksense_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_parksense_proto_goTypes,
		DependencyIndexes: file_parksense_proto_depIdxs,
		EnumInfos:         file_parksense_proto_enumTypes,
		MessageInfos:      file_parksense_proto_msgTypes,
	}.Build()
	File_parksense_proto = out.File
	file_parksense_proto_goTypes = nil
	file_parksense_proto_depIdxs = nil
}
